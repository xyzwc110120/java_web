<?xml version="1.0" encoding="UTF-8"?>
<web-app version="4.0"
         xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd">

    <!-- Web 的配置（配置 Servlet） -->

    <!-- 配置 Servlet 类的信息 -->
    <servlet>
        <!-- 为该 HelloServlet 类起个名称 -->
        <servlet-name>HelloServlet</servlet-name>
        <!-- 配置 Servlet 类的全限定名，Tomcat 可以通过映射类创建该类对象 -->
        <servlet-class>com.cyx.java_web.web_01_servlet.servlet_01_helloWord.HelloServlet</servlet-class>
    </servlet>
    <!-- 配置映射（向外暴露该 Servlet 类的一个资源名称，供外链直接访问） -->
    <servlet-mapping>
        <!-- 通过为 Servlet 类配置的名称找到该类 -->
        <servlet-name>HelloServlet</servlet-name>
        <!-- 提供一个资源名称（必须已“/”开头 ！！！） -->
        <url-pattern>/hello</url-pattern>
    </servlet-mapping>


    <!-- 每个 Servlet 都要单独配置 -->
    <servlet>
        <servlet-name>InitParamServlet</servlet-name>
        <servlet-class>com.cyx.java_web.web_01_servlet.servlet_02_initParam.InitParamServlet</servlet-class>

        <!-- 初始化参数（必须写在 <servlet-class> 元素之后） -->
        <init-param>
            <!-- 初始化参数名 -->
            <param-name>encoding</param-name>
            <!-- 初始化参数值 -->
            <param-value>UTF-8</param-value>
        </init-param>
        <!-- 每个初始化参数都要单独配置 -->
        <init-param>
            <param-name>name</param-name>
            <param-value>cyx</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>InitParamServlet</servlet-name>
        <url-pattern>/init</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>NewServlet1</servlet-name>
        <servlet-class>com.cyx.java_web.web_01_servlet.servlet_03_extends.extends1.NewServlet1</servlet-class>
        <init-param>
            <param-name>name</param-name>
            <param-value>cyx</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>NewServlet1</servlet-name>
        <url-pattern>/new1</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>NewServlet2</servlet-name>
        <servlet-class>com.cyx.java_web.web_01_servlet.servlet_03_extends.extends2.NewServlet2</servlet-class>
        <init-param>
            <param-name>name</param-name>
            <param-value>cyx</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>NewServlet2</servlet-name>
        <url-pattern>/new2</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>NewServlet3</servlet-name>
        <servlet-class>com.cyx.java_web.web_01_servlet.servlet_03_extends.extends3.NewServlet3</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>NewServlet3</servlet-name>
        <url-pattern>/new3</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>NewServlet4</servlet-name>
        <servlet-class>com.cyx.java_web.web_01_servlet.servlet_03_extends.extends3.NewServlet4</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>NewServlet4</servlet-name>
        <url-pattern>/new4</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>HttpServletRequestDemo</servlet-name>
        <servlet-class>com.cyx.java_web.web_01_servlet.servlet_04_request.HttpServletRequestDemo</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>HttpServletRequestDemo</servlet-name>
        <url-pattern>/requestDemo</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>RegisterServlet</servlet-name>
        <servlet-class>com.cyx.java_web.web_01_servlet.servlet_05_register.RegisterServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>RegisterServlet</servlet-name>
        <url-pattern>/register</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>HttpServletResponseDemo</servlet-name>
        <servlet-class>com.cyx.java_web.web_01_servlet.servlet_06_response.HttpServletResponseDemo</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>HttpServletResponseDemo</servlet-name>
        <url-pattern>/resp</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>SimpleCalculatorServlet</servlet-name>
        <servlet-class>com.cyx.java_web.web_01_servlet.servlet_07_simpleCalculator.SimpleCalculatorServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>SimpleCalculatorServlet</servlet-name>
        <url-pattern>/calculator</url-pattern>
    </servlet-mapping>

    
    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
    </welcome-file-list>


    <!-- 配置全局初始化参数 -->
    <context-param>
        <param-name>version</param-name>
        <param-value>1.0</param-value>
    </context-param>


    <!-- 全局的错误提示页面 -->
    <error-page>
        <!-- 异常类型(因为异常类型很多，所以一般不适用此元素) -->
        <!-- <exception-type>java.lang.NullPointerException</exception-type> -->
        <!-- 错误码类型（一般使用的此元素） -->
        <error-code>404</error-code>
        <!-- 错误提示页面资源地址，必须以“/”开头 -->
        <location>/404.jsp</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/500.jsp</location>
    </error-page>


    <!-- 配置过滤器 -->
    <filter>
        <filter-name>helloFilter</filter-name>
        <filter-class>com.cyx.java_web.web_05_filter_listener.filter.hello.HelloFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>helloFilter</filter-name>
        <!-- 可写多个 url-pattern 元素，表示对多个资源做拦截 -->
        <url-pattern>/filter/hello/hello.jsp</url-pattern>
        <url-pattern>/filter/hello/hi.jsp</url-pattern>

        <!-- 对 /filter/hello 资源下的所有请求多拦截 -->
        <!--<url-pattern>/filter/hello/*.jsp</url-pattern>-->
        <!-- 对所有请求过滤 -->
        <!-- <url-pattern>/*</url-pattern> -->
    </filter-mapping>


    <!-- 拦截器的执行顺序 -->
    <filter>
        <filter-name>sequenceFilter1</filter-name>
        <filter-class>com.cyx.java_web.web_05_filter_listener.filter.detail.sequence.SequenceFilter1</filter-class>
    </filter>
    <filter>
        <filter-name>sequenceFilter2</filter-name>
        <filter-class>com.cyx.java_web.web_05_filter_listener.filter.detail.sequence.SequenceFilter2</filter-class>
    </filter>
    <filter>
        <filter-name>sequenceFilter3</filter-name>
        <filter-class>com.cyx.java_web.web_05_filter_listener.filter.detail.sequence.SequenceFilter3</filter-class>
    </filter>
    <!-- 我们将 filter 元素和 filter-mapping 元素分开写并打乱顺序，以便于观察 -->
    <filter-mapping>
        <filter-name>sequenceFilter3</filter-name>
        <url-pattern>/jspDemo/hello/hello.jsp</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>sequenceFilter2</filter-name>
        <url-pattern>/jspDemo/hello/hello.jsp</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>sequenceFilter1</filter-name>
        <url-pattern>/jspDemo/hello/hello.jsp</url-pattern>
    </filter-mapping>


    <!-- filter 的 dispatcher（表示对哪些动作过滤） -->
    <filter>
        <filter-name>dispatcherFilter</filter-name>
        <filter-class>com.cyx.java_web.web_05_filter_listener.filter.detail.dispatcher.DispatcherFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>dispatcherFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <!-- 只对请求做拦截（默认） -->
        <dispatcher>REQUEST</dispatcher>
        <!-- 增加对请求转发做拦截 -->
        <dispatcher>FORWARD</dispatcher>
        <!-- 增加对请求包含做拦截 -->
        <dispatcher>INCLUDE</dispatcher>
        <!-- 增加对跳转到错误页面做拦截 -->
        <dispatcher>ERROR</dispatcher>

        <!-- 可以通过 servlet-name 元素对指定的 servlet 做拦截（一般不用这种方式） -->
        <!--<servlet-name>HelloServlet</servlet-name>-->
    </filter-mapping>


    <!-- 请求编码过滤器 -->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>com.cyx.java_web.web_05_filter_listener.filter.characterEncoding.CharacterEncodingFilter</filter-class>

        <!-- 设置初始化参数，自己做配置参数 -->
        <!-- 自定义字符编码 -->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!-- 是否强制使用配置的字符编码 -->
        <init-param>
            <param-name>force</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!-- 登陆检查过滤器 -->
    <filter>
        <filter-name>checkLoginFilter</filter-name>
        <filter-class>com.cyx.java_web.web_05_filter_listener.filter.checkLogin.CheckLoginFilter</filter-class>

        <!-- 用户信息存入 session 时所用名称 -->
        <init-param>
            <param-name>sessionName</param-name>
            <param-value>USER_IN_SESSION</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>checkLoginFilter</filter-name>
        <!-- 对所有 /system 打头的资源进行检查 -->
        <url-pattern>/system/*</url-pattern>
    </filter-mapping>


    <!--
        在 web.xml 配置文件中，一般的习惯的配置顺序是：
            监听器（Listener） -> 过滤器（Filter） -> Servlet
    -->
    <!-- 配置监听器 -->
    <listener>
        <listener-class>com.cyx.java_web.web_05_filter_listener.listener.ServletContextListenerDemo</listener-class>
        <!-- 监听器组件中没有初始化参数配置，要用解决监听器中的硬编码，只能使用全局的初始化参数 -->
    </listener>
    <!-- 配置监听器没有 listener-name 和 listener-mapping 元素进行配置，因为监听器实现的哪个类，就是对哪部分做监听 -->

</web-app>